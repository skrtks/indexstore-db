// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Symbol.proto

#include "Symbol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ProtoIndexStoreDB {
PROTOBUF_CONSTEXPR SymbolInfo::SymbolInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_.sub_kind_)*/0
  , /*decltype(_impl_.properties_)*/0u
  , /*decltype(_impl_.language_)*/0} {}
struct SymbolInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolInfoDefaultTypeInternal() {}
  union {
    SymbolInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolInfoDefaultTypeInternal _SymbolInfo_default_instance_;
PROTOBUF_CONSTEXPR Symbol::Symbol(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct SymbolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolDefaultTypeInternal() {}
  union {
    Symbol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolDefaultTypeInternal _Symbol_default_instance_;
PROTOBUF_CONSTEXPR SymbolRelation::SymbolRelation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.symbol_)*/nullptr
  , /*decltype(_impl_.roles_)*/uint64_t{0u}} {}
struct SymbolRelationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolRelationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolRelationDefaultTypeInternal() {}
  union {
    SymbolRelation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolRelationDefaultTypeInternal _SymbolRelation_default_instance_;
PROTOBUF_CONSTEXPR SymbolOccurrenceLocation::SymbolOccurrenceLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.module_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_)*/0u
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.is_system_)*/false} {}
struct SymbolOccurrenceLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolOccurrenceLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolOccurrenceLocationDefaultTypeInternal() {}
  union {
    SymbolOccurrenceLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolOccurrenceLocationDefaultTypeInternal _SymbolOccurrenceLocation_default_instance_;
PROTOBUF_CONSTEXPR SymbolOccurrence::SymbolOccurrence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.relations_)*/{}
  , /*decltype(_impl_.target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.symbol_)*/nullptr
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.roles_)*/uint64_t{0u}
  , /*decltype(_impl_.provider_kind_)*/1} {}
struct SymbolOccurrenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolOccurrenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolOccurrenceDefaultTypeInternal() {}
  union {
    SymbolOccurrence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolOccurrenceDefaultTypeInternal _SymbolOccurrence_default_instance_;
PROTOBUF_CONSTEXPR SymbolOccurrences::SymbolOccurrences(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.occurrence_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SymbolOccurrencesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolOccurrencesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolOccurrencesDefaultTypeInternal() {}
  union {
    SymbolOccurrences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolOccurrencesDefaultTypeInternal _SymbolOccurrences_default_instance_;
PROTOBUF_CONSTEXPR Symbols::Symbols(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.symbol_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SymbolsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolsDefaultTypeInternal() {}
  union {
    Symbols _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolsDefaultTypeInternal _Symbols_default_instance_;
}  // namespace ProtoIndexStoreDB
static ::_pb::Metadata file_level_metadata_Symbol_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Symbol_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Symbol_2eproto = nullptr;

const uint32_t TableStruct_Symbol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolInfo, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolInfo, _impl_.sub_kind_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolInfo, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolInfo, _impl_.language_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::Symbol, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::Symbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::Symbol, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::Symbol, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::Symbol, _impl_.usr_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolRelation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolRelation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolRelation, _impl_.roles_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolRelation, _impl_.symbol_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrenceLocation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrenceLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrenceLocation, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrenceLocation, _impl_.module_name_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrenceLocation, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrenceLocation, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrenceLocation, _impl_.is_system_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrence, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrence, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrence, _impl_.roles_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrence, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrence, _impl_.provider_kind_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrence, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrence, _impl_.relations_),
  1,
  3,
  2,
  4,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::SymbolOccurrences, _impl_.occurrence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::Symbols, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoIndexStoreDB::Symbols, _impl_.symbol_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::ProtoIndexStoreDB::SymbolInfo)},
  { 14, 23, -1, sizeof(::ProtoIndexStoreDB::Symbol)},
  { 26, 34, -1, sizeof(::ProtoIndexStoreDB::SymbolRelation)},
  { 36, 47, -1, sizeof(::ProtoIndexStoreDB::SymbolOccurrenceLocation)},
  { 52, 64, -1, sizeof(::ProtoIndexStoreDB::SymbolOccurrence)},
  { 70, -1, -1, sizeof(::ProtoIndexStoreDB::SymbolOccurrences)},
  { 77, -1, -1, sizeof(::ProtoIndexStoreDB::Symbols)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ProtoIndexStoreDB::_SymbolInfo_default_instance_._instance,
  &::ProtoIndexStoreDB::_Symbol_default_instance_._instance,
  &::ProtoIndexStoreDB::_SymbolRelation_default_instance_._instance,
  &::ProtoIndexStoreDB::_SymbolOccurrenceLocation_default_instance_._instance,
  &::ProtoIndexStoreDB::_SymbolOccurrence_default_instance_._instance,
  &::ProtoIndexStoreDB::_SymbolOccurrences_default_instance_._instance,
  &::ProtoIndexStoreDB::_Symbols_default_instance_._instance,
};

const char descriptor_table_protodef_Symbol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Symbol.proto\022\021ProtoIndexStoreDB\"\306\t\n\nSy"
  "mbolInfo\0220\n\004kind\030\001 \001(\0162\".ProtoIndexStore"
  "DB.SymbolInfo.Kind\0227\n\010sub_kind\030\002 \001(\0162%.P"
  "rotoIndexStoreDB.SymbolInfo.SubKind\022\022\n\np"
  "roperties\030\003 \001(\r\0228\n\010language\030\004 \001(\0162&.Prot"
  "oIndexStoreDB.SymbolInfo.Language\"\302\003\n\004Ki"
  "nd\022\013\n\007UNKNOWN\020\000\022\n\n\006MODULE\020\001\022\r\n\tNAMESPACE"
  "\020\002\022\023\n\017NAMESPACE_ALIAS\020\003\022\t\n\005MACRO\020\004\022\010\n\004EN"
  "UM\020\005\022\n\n\006STRUCT\020\006\022\t\n\005CLASS\020\007\022\014\n\010PROTOCOL\020"
  "\010\022\r\n\tEXTENSION\020\t\022\t\n\005UNION\020\n\022\016\n\nTYPE_ALIA"
  "S\020\013\022\014\n\010FUNCTION\020\014\022\014\n\010VARIABLE\020\r\022\r\n\tPARAM"
  "ETER\020\016\022\t\n\005FIELD\020\017\022\021\n\rENUM_CONSTANT\020\020\022\023\n\017"
  "INSTANCE_METHOD\020\021\022\020\n\014CLASS_METHOD\020\022\022\021\n\rS"
  "TATIC_METHOD\020\023\022\025\n\021INSTANCE_PROPERTY\020\024\022\022\n"
  "\016CLASS_PROPERTY\020\025\022\023\n\017STATIC_PROPERTY\020\026\022\017"
  "\n\013CONSTRUCTOR\020\027\022\016\n\nDESTRUCTOR\020\030\022\027\n\023CONVE"
  "RSION_FUNCTION\020\031\022\013\n\007CONCEPT\020\032\022\017\n\013COMMENT"
  "_TAG\020\033\"\210\004\n\007SubKind\022\010\n\004NONE\020\000\022\030\n\024CXX_COPY"
  "_CONSTRUCTOR\020\001\022\030\n\024CXX_MOVE_CONSTRUCTOR\020\002"
  "\022\023\n\017ACCESSOR_GETTER\020\003\022\023\n\017ACCESSOR_SETTER"
  "\020\004\022\033\n\027SWIFT_ACCESSOR_WILL_SET\020\005\022\032\n\026SWIFT"
  "_ACCESSOR_DID_SET\020\006\022\034\n\030SWIFT_ACCESSOR_AD"
  "DRESSOR\020\007\022$\n SWIFT_ACCESSOR_MUTABLE_ADDR"
  "ESSOR\020\010\022\035\n\031SWIFT_EXTENSION_OF_STRUCT\020\t\022\034"
  "\n\030SWIFT_EXTENSION_OF_CLASS\020\n\022\033\n\027SWIFT_EX"
  "TENSION_OF_ENUM\020\013\022\037\n\033SWIFT_EXTENSION_OF_"
  "PROTOCOL\020\014\022\031\n\025SWIFT_PREFIX_OPERATOR\020\r\022\032\n"
  "\026SWIFT_POSTFIX_OPERATOR\020\016\022\030\n\024SWIFT_INFIX"
  "_OPERATOR\020\017\022\023\n\017SWIFT_SUBSCRIPT\020\020\022\031\n\025SWIF"
  "T_ASSOCIATED_TYPE\020\021\022\034\n\030SWIFT_GENERIC_TYP"
  "E_PARAM\020\022\"/\n\010Language\022\005\n\001C\020\000\022\010\n\004OBJC\020\001\022\007"
  "\n\003CXX\020\002\022\t\n\005SWIFT\020\003\"P\n\006Symbol\022+\n\004info\030\001 \001"
  "(\0132\035.ProtoIndexStoreDB.SymbolInfo\022\014\n\004nam"
  "e\030\002 \001(\t\022\013\n\003usr\030\003 \001(\t\"J\n\016SymbolRelation\022\r"
  "\n\005roles\030\001 \001(\004\022)\n\006symbol\030\002 \001(\0132\031.ProtoInd"
  "exStoreDB.Symbol\"n\n\030SymbolOccurrenceLoca"
  "tion\022\014\n\004path\030\001 \001(\t\022\023\n\013module_name\030\002 \001(\t\022"
  "\014\n\004line\030\003 \001(\r\022\016\n\006column\030\004 \001(\r\022\021\n\tis_syst"
  "em\030\005 \001(\010\"\300\002\n\020SymbolOccurrence\022)\n\006symbol\030"
  "\001 \001(\0132\031.ProtoIndexStoreDB.Symbol\022\r\n\005role"
  "s\030\002 \001(\004\022=\n\010location\030\003 \001(\0132+.ProtoIndexSt"
  "oreDB.SymbolOccurrenceLocation\022G\n\rprovid"
  "er_kind\030\004 \001(\01620.ProtoIndexStoreDB.Symbol"
  "Occurrence.ProviderKind\022\016\n\006target\030\005 \001(\t\022"
  "4\n\trelations\030\006 \003(\0132!.ProtoIndexStoreDB.S"
  "ymbolRelation\"$\n\014ProviderKind\022\t\n\005CLANG\020\001"
  "\022\t\n\005SWIFT\020\002\"L\n\021SymbolOccurrences\0227\n\noccu"
  "rrence\030\001 \003(\0132#.ProtoIndexStoreDB.SymbolO"
  "ccurrence\"4\n\007Symbols\022)\n\006symbol\030\001 \003(\0132\031.P"
  "rotoIndexStoreDB.SymbolB7\n com.jetbrains"
  ".swift.indexStoreDBB\021IndexStoreDBProtoP\001"
  ;
static ::_pbi::once_flag descriptor_table_Symbol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Symbol_2eproto = {
    false, false, 2040, descriptor_table_protodef_Symbol_2eproto,
    "Symbol.proto",
    &descriptor_table_Symbol_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_Symbol_2eproto::offsets,
    file_level_metadata_Symbol_2eproto, file_level_enum_descriptors_Symbol_2eproto,
    file_level_service_descriptors_Symbol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Symbol_2eproto_getter() {
  return &descriptor_table_Symbol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Symbol_2eproto(&descriptor_table_Symbol_2eproto);
namespace ProtoIndexStoreDB {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SymbolInfo_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Symbol_2eproto);
  return file_level_enum_descriptors_Symbol_2eproto[0];
}
bool SymbolInfo_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SymbolInfo_Kind SymbolInfo::UNKNOWN;
constexpr SymbolInfo_Kind SymbolInfo::MODULE;
constexpr SymbolInfo_Kind SymbolInfo::NAMESPACE;
constexpr SymbolInfo_Kind SymbolInfo::NAMESPACE_ALIAS;
constexpr SymbolInfo_Kind SymbolInfo::MACRO;
constexpr SymbolInfo_Kind SymbolInfo::ENUM;
constexpr SymbolInfo_Kind SymbolInfo::STRUCT;
constexpr SymbolInfo_Kind SymbolInfo::CLASS;
constexpr SymbolInfo_Kind SymbolInfo::PROTOCOL;
constexpr SymbolInfo_Kind SymbolInfo::EXTENSION;
constexpr SymbolInfo_Kind SymbolInfo::UNION;
constexpr SymbolInfo_Kind SymbolInfo::TYPE_ALIAS;
constexpr SymbolInfo_Kind SymbolInfo::FUNCTION;
constexpr SymbolInfo_Kind SymbolInfo::VARIABLE;
constexpr SymbolInfo_Kind SymbolInfo::PARAMETER;
constexpr SymbolInfo_Kind SymbolInfo::FIELD;
constexpr SymbolInfo_Kind SymbolInfo::ENUM_CONSTANT;
constexpr SymbolInfo_Kind SymbolInfo::INSTANCE_METHOD;
constexpr SymbolInfo_Kind SymbolInfo::CLASS_METHOD;
constexpr SymbolInfo_Kind SymbolInfo::STATIC_METHOD;
constexpr SymbolInfo_Kind SymbolInfo::INSTANCE_PROPERTY;
constexpr SymbolInfo_Kind SymbolInfo::CLASS_PROPERTY;
constexpr SymbolInfo_Kind SymbolInfo::STATIC_PROPERTY;
constexpr SymbolInfo_Kind SymbolInfo::CONSTRUCTOR;
constexpr SymbolInfo_Kind SymbolInfo::DESTRUCTOR;
constexpr SymbolInfo_Kind SymbolInfo::CONVERSION_FUNCTION;
constexpr SymbolInfo_Kind SymbolInfo::CONCEPT;
constexpr SymbolInfo_Kind SymbolInfo::COMMENT_TAG;
constexpr SymbolInfo_Kind SymbolInfo::Kind_MIN;
constexpr SymbolInfo_Kind SymbolInfo::Kind_MAX;
constexpr int SymbolInfo::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SymbolInfo_SubKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Symbol_2eproto);
  return file_level_enum_descriptors_Symbol_2eproto[1];
}
bool SymbolInfo_SubKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SymbolInfo_SubKind SymbolInfo::NONE;
constexpr SymbolInfo_SubKind SymbolInfo::CXX_COPY_CONSTRUCTOR;
constexpr SymbolInfo_SubKind SymbolInfo::CXX_MOVE_CONSTRUCTOR;
constexpr SymbolInfo_SubKind SymbolInfo::ACCESSOR_GETTER;
constexpr SymbolInfo_SubKind SymbolInfo::ACCESSOR_SETTER;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_ACCESSOR_WILL_SET;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_ACCESSOR_DID_SET;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_ACCESSOR_ADDRESSOR;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_ACCESSOR_MUTABLE_ADDRESSOR;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_EXTENSION_OF_STRUCT;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_EXTENSION_OF_CLASS;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_EXTENSION_OF_ENUM;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_EXTENSION_OF_PROTOCOL;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_PREFIX_OPERATOR;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_POSTFIX_OPERATOR;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_INFIX_OPERATOR;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_SUBSCRIPT;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_ASSOCIATED_TYPE;
constexpr SymbolInfo_SubKind SymbolInfo::SWIFT_GENERIC_TYPE_PARAM;
constexpr SymbolInfo_SubKind SymbolInfo::SubKind_MIN;
constexpr SymbolInfo_SubKind SymbolInfo::SubKind_MAX;
constexpr int SymbolInfo::SubKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SymbolInfo_Language_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Symbol_2eproto);
  return file_level_enum_descriptors_Symbol_2eproto[2];
}
bool SymbolInfo_Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SymbolInfo_Language SymbolInfo::C;
constexpr SymbolInfo_Language SymbolInfo::OBJC;
constexpr SymbolInfo_Language SymbolInfo::CXX;
constexpr SymbolInfo_Language SymbolInfo::SWIFT;
constexpr SymbolInfo_Language SymbolInfo::Language_MIN;
constexpr SymbolInfo_Language SymbolInfo::Language_MAX;
constexpr int SymbolInfo::Language_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SymbolOccurrence_ProviderKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Symbol_2eproto);
  return file_level_enum_descriptors_Symbol_2eproto[3];
}
bool SymbolOccurrence_ProviderKind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SymbolOccurrence_ProviderKind SymbolOccurrence::CLANG;
constexpr SymbolOccurrence_ProviderKind SymbolOccurrence::SWIFT;
constexpr SymbolOccurrence_ProviderKind SymbolOccurrence::ProviderKind_MIN;
constexpr SymbolOccurrence_ProviderKind SymbolOccurrence::ProviderKind_MAX;
constexpr int SymbolOccurrence::ProviderKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SymbolInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SymbolInfo>()._impl_._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sub_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SymbolInfo::SymbolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoIndexStoreDB.SymbolInfo)
}
SymbolInfo::SymbolInfo(const SymbolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SymbolInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.sub_kind_){}
    , decltype(_impl_.properties_){}
    , decltype(_impl_.language_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.kind_, &from._impl_.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.language_) -
    reinterpret_cast<char*>(&_impl_.kind_)) + sizeof(_impl_.language_));
  // @@protoc_insertion_point(copy_constructor:ProtoIndexStoreDB.SymbolInfo)
}

inline void SymbolInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kind_){0}
    , decltype(_impl_.sub_kind_){0}
    , decltype(_impl_.properties_){0u}
    , decltype(_impl_.language_){0}
  };
}

SymbolInfo::~SymbolInfo() {
  // @@protoc_insertion_point(destructor:ProtoIndexStoreDB.SymbolInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SymbolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SymbolInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SymbolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoIndexStoreDB.SymbolInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.language_) -
        reinterpret_cast<char*>(&_impl_.kind_)) + sizeof(_impl_.language_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SymbolInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ProtoIndexStoreDB.SymbolInfo.Kind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoIndexStoreDB::SymbolInfo_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::ProtoIndexStoreDB::SymbolInfo_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ProtoIndexStoreDB.SymbolInfo.SubKind sub_kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoIndexStoreDB::SymbolInfo_SubKind_IsValid(val))) {
            _internal_set_sub_kind(static_cast<::ProtoIndexStoreDB::SymbolInfo_SubKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_properties(&has_bits);
          _impl_.properties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ProtoIndexStoreDB.SymbolInfo.Language language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoIndexStoreDB::SymbolInfo_Language_IsValid(val))) {
            _internal_set_language(static_cast<::ProtoIndexStoreDB::SymbolInfo_Language>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SymbolInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoIndexStoreDB.SymbolInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ProtoIndexStoreDB.SymbolInfo.Kind kind = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // optional .ProtoIndexStoreDB.SymbolInfo.SubKind sub_kind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sub_kind(), target);
  }

  // optional uint32 properties = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_properties(), target);
  }

  // optional .ProtoIndexStoreDB.SymbolInfo.Language language = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoIndexStoreDB.SymbolInfo)
  return target;
}

size_t SymbolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoIndexStoreDB.SymbolInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ProtoIndexStoreDB.SymbolInfo.Kind kind = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
    }

    // optional .ProtoIndexStoreDB.SymbolInfo.SubKind sub_kind = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sub_kind());
    }

    // optional uint32 properties = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_properties());
    }

    // optional .ProtoIndexStoreDB.SymbolInfo.Language language = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SymbolInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SymbolInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SymbolInfo::GetClassData() const { return &_class_data_; }


void SymbolInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SymbolInfo*>(&to_msg);
  auto& from = static_cast<const SymbolInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoIndexStoreDB.SymbolInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sub_kind_ = from._impl_.sub_kind_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.properties_ = from._impl_.properties_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.language_ = from._impl_.language_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SymbolInfo::CopyFrom(const SymbolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoIndexStoreDB.SymbolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolInfo::IsInitialized() const {
  return true;
}

void SymbolInfo::InternalSwap(SymbolInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SymbolInfo, _impl_.language_)
      + sizeof(SymbolInfo::_impl_.language_)
      - PROTOBUF_FIELD_OFFSET(SymbolInfo, _impl_.kind_)>(
          reinterpret_cast<char*>(&_impl_.kind_),
          reinterpret_cast<char*>(&other->_impl_.kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Symbol_2eproto_getter, &descriptor_table_Symbol_2eproto_once,
      file_level_metadata_Symbol_2eproto[0]);
}

// ===================================================================

class Symbol::_Internal {
 public:
  using HasBits = decltype(std::declval<Symbol>()._impl_._has_bits_);
  static const ::ProtoIndexStoreDB::SymbolInfo& info(const Symbol* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_usr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ProtoIndexStoreDB::SymbolInfo&
Symbol::_Internal::info(const Symbol* msg) {
  return *msg->_impl_.info_;
}
Symbol::Symbol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoIndexStoreDB.Symbol)
}
Symbol::Symbol(const Symbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Symbol* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.usr_){}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.usr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_usr()) {
    _this->_impl_.usr_.Set(from._internal_usr(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::ProtoIndexStoreDB::SymbolInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:ProtoIndexStoreDB.Symbol)
}

inline void Symbol::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.usr_){}
    , decltype(_impl_.info_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.usr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Symbol::~Symbol() {
  // @@protoc_insertion_point(destructor:ProtoIndexStoreDB.Symbol)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Symbol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.usr_.Destroy();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void Symbol::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Symbol::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoIndexStoreDB.Symbol)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.usr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Symbol::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ProtoIndexStoreDB.SymbolInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ProtoIndexStoreDB.Symbol.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string usr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_usr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ProtoIndexStoreDB.Symbol.usr");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Symbol::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoIndexStoreDB.Symbol)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ProtoIndexStoreDB.SymbolInfo info = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoIndexStoreDB.Symbol.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string usr = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_usr().data(), static_cast<int>(this->_internal_usr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoIndexStoreDB.Symbol.usr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_usr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoIndexStoreDB.Symbol)
  return target;
}

size_t Symbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoIndexStoreDB.Symbol)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string usr = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_usr());
    }

    // optional .ProtoIndexStoreDB.SymbolInfo info = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Symbol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Symbol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Symbol::GetClassData() const { return &_class_data_; }


void Symbol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Symbol*>(&to_msg);
  auto& from = static_cast<const Symbol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoIndexStoreDB.Symbol)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_usr(from._internal_usr());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_info()->::ProtoIndexStoreDB::SymbolInfo::MergeFrom(
          from._internal_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Symbol::CopyFrom(const Symbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoIndexStoreDB.Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Symbol::IsInitialized() const {
  return true;
}

void Symbol::InternalSwap(Symbol* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.usr_, lhs_arena,
      &other->_impl_.usr_, rhs_arena
  );
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Symbol::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Symbol_2eproto_getter, &descriptor_table_Symbol_2eproto_once,
      file_level_metadata_Symbol_2eproto[1]);
}

// ===================================================================

class SymbolRelation::_Internal {
 public:
  using HasBits = decltype(std::declval<SymbolRelation>()._impl_._has_bits_);
  static void set_has_roles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ProtoIndexStoreDB::Symbol& symbol(const SymbolRelation* msg);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ProtoIndexStoreDB::Symbol&
SymbolRelation::_Internal::symbol(const SymbolRelation* msg) {
  return *msg->_impl_.symbol_;
}
SymbolRelation::SymbolRelation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoIndexStoreDB.SymbolRelation)
}
SymbolRelation::SymbolRelation(const SymbolRelation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SymbolRelation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.symbol_){nullptr}
    , decltype(_impl_.roles_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_symbol()) {
    _this->_impl_.symbol_ = new ::ProtoIndexStoreDB::Symbol(*from._impl_.symbol_);
  }
  _this->_impl_.roles_ = from._impl_.roles_;
  // @@protoc_insertion_point(copy_constructor:ProtoIndexStoreDB.SymbolRelation)
}

inline void SymbolRelation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.symbol_){nullptr}
    , decltype(_impl_.roles_){uint64_t{0u}}
  };
}

SymbolRelation::~SymbolRelation() {
  // @@protoc_insertion_point(destructor:ProtoIndexStoreDB.SymbolRelation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SymbolRelation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.symbol_;
}

void SymbolRelation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SymbolRelation::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoIndexStoreDB.SymbolRelation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.symbol_ != nullptr);
    _impl_.symbol_->Clear();
  }
  _impl_.roles_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SymbolRelation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 roles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roles(&has_bits);
          _impl_.roles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ProtoIndexStoreDB.Symbol symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_symbol(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SymbolRelation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoIndexStoreDB.SymbolRelation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 roles = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roles(), target);
  }

  // optional .ProtoIndexStoreDB.Symbol symbol = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::symbol(this),
        _Internal::symbol(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoIndexStoreDB.SymbolRelation)
  return target;
}

size_t SymbolRelation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoIndexStoreDB.SymbolRelation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ProtoIndexStoreDB.Symbol symbol = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.symbol_);
    }

    // optional uint64 roles = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roles());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SymbolRelation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SymbolRelation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SymbolRelation::GetClassData() const { return &_class_data_; }


void SymbolRelation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SymbolRelation*>(&to_msg);
  auto& from = static_cast<const SymbolRelation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoIndexStoreDB.SymbolRelation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_symbol()->::ProtoIndexStoreDB::Symbol::MergeFrom(
          from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.roles_ = from._impl_.roles_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SymbolRelation::CopyFrom(const SymbolRelation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoIndexStoreDB.SymbolRelation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolRelation::IsInitialized() const {
  return true;
}

void SymbolRelation::InternalSwap(SymbolRelation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SymbolRelation, _impl_.roles_)
      + sizeof(SymbolRelation::_impl_.roles_)
      - PROTOBUF_FIELD_OFFSET(SymbolRelation, _impl_.symbol_)>(
          reinterpret_cast<char*>(&_impl_.symbol_),
          reinterpret_cast<char*>(&other->_impl_.symbol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolRelation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Symbol_2eproto_getter, &descriptor_table_Symbol_2eproto_once,
      file_level_metadata_Symbol_2eproto[2]);
}

// ===================================================================

class SymbolOccurrenceLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<SymbolOccurrenceLocation>()._impl_._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_module_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_system(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SymbolOccurrenceLocation::SymbolOccurrenceLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoIndexStoreDB.SymbolOccurrenceLocation)
}
SymbolOccurrenceLocation::SymbolOccurrenceLocation(const SymbolOccurrenceLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SymbolOccurrenceLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){}
    , decltype(_impl_.module_name_){}
    , decltype(_impl_.line_){}
    , decltype(_impl_.column_){}
    , decltype(_impl_.is_system_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.module_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module_name()) {
    _this->_impl_.module_name_.Set(from._internal_module_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.line_, &from._impl_.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_system_) -
    reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.is_system_));
  // @@protoc_insertion_point(copy_constructor:ProtoIndexStoreDB.SymbolOccurrenceLocation)
}

inline void SymbolOccurrenceLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){}
    , decltype(_impl_.module_name_){}
    , decltype(_impl_.line_){0u}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.is_system_){false}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.module_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SymbolOccurrenceLocation::~SymbolOccurrenceLocation() {
  // @@protoc_insertion_point(destructor:ProtoIndexStoreDB.SymbolOccurrenceLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SymbolOccurrenceLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.module_name_.Destroy();
}

void SymbolOccurrenceLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SymbolOccurrenceLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoIndexStoreDB.SymbolOccurrenceLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.module_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.line_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_system_) -
        reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.is_system_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SymbolOccurrenceLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ProtoIndexStoreDB.SymbolOccurrenceLocation.path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string module_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ProtoIndexStoreDB.SymbolOccurrenceLocation.module_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_line(&has_bits);
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_system = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_system(&has_bits);
          _impl_.is_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SymbolOccurrenceLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoIndexStoreDB.SymbolOccurrenceLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoIndexStoreDB.SymbolOccurrenceLocation.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // optional string module_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module_name().data(), static_cast<int>(this->_internal_module_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoIndexStoreDB.SymbolOccurrenceLocation.module_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module_name(), target);
  }

  // optional uint32 line = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_line(), target);
  }

  // optional uint32 column = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_column(), target);
  }

  // optional bool is_system = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_system(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoIndexStoreDB.SymbolOccurrenceLocation)
  return target;
}

size_t SymbolOccurrenceLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoIndexStoreDB.SymbolOccurrenceLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string module_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module_name());
    }

    // optional uint32 line = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_line());
    }

    // optional uint32 column = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
    }

    // optional bool is_system = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SymbolOccurrenceLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SymbolOccurrenceLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SymbolOccurrenceLocation::GetClassData() const { return &_class_data_; }


void SymbolOccurrenceLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SymbolOccurrenceLocation*>(&to_msg);
  auto& from = static_cast<const SymbolOccurrenceLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoIndexStoreDB.SymbolOccurrenceLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_module_name(from._internal_module_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.line_ = from._impl_.line_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_system_ = from._impl_.is_system_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SymbolOccurrenceLocation::CopyFrom(const SymbolOccurrenceLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoIndexStoreDB.SymbolOccurrenceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolOccurrenceLocation::IsInitialized() const {
  return true;
}

void SymbolOccurrenceLocation::InternalSwap(SymbolOccurrenceLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_name_, lhs_arena,
      &other->_impl_.module_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SymbolOccurrenceLocation, _impl_.is_system_)
      + sizeof(SymbolOccurrenceLocation::_impl_.is_system_)
      - PROTOBUF_FIELD_OFFSET(SymbolOccurrenceLocation, _impl_.line_)>(
          reinterpret_cast<char*>(&_impl_.line_),
          reinterpret_cast<char*>(&other->_impl_.line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolOccurrenceLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Symbol_2eproto_getter, &descriptor_table_Symbol_2eproto_once,
      file_level_metadata_Symbol_2eproto[3]);
}

// ===================================================================

class SymbolOccurrence::_Internal {
 public:
  using HasBits = decltype(std::declval<SymbolOccurrence>()._impl_._has_bits_);
  static const ::ProtoIndexStoreDB::Symbol& symbol(const SymbolOccurrence* msg);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roles(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ProtoIndexStoreDB::SymbolOccurrenceLocation& location(const SymbolOccurrence* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_provider_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ProtoIndexStoreDB::Symbol&
SymbolOccurrence::_Internal::symbol(const SymbolOccurrence* msg) {
  return *msg->_impl_.symbol_;
}
const ::ProtoIndexStoreDB::SymbolOccurrenceLocation&
SymbolOccurrence::_Internal::location(const SymbolOccurrence* msg) {
  return *msg->_impl_.location_;
}
SymbolOccurrence::SymbolOccurrence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoIndexStoreDB.SymbolOccurrence)
}
SymbolOccurrence::SymbolOccurrence(const SymbolOccurrence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SymbolOccurrence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relations_){from._impl_.relations_}
    , decltype(_impl_.target_){}
    , decltype(_impl_.symbol_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.roles_){}
    , decltype(_impl_.provider_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target()) {
    _this->_impl_.target_.Set(from._internal_target(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_symbol()) {
    _this->_impl_.symbol_ = new ::ProtoIndexStoreDB::Symbol(*from._impl_.symbol_);
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::ProtoIndexStoreDB::SymbolOccurrenceLocation(*from._impl_.location_);
  }
  ::memcpy(&_impl_.roles_, &from._impl_.roles_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.provider_kind_) -
    reinterpret_cast<char*>(&_impl_.roles_)) + sizeof(_impl_.provider_kind_));
  // @@protoc_insertion_point(copy_constructor:ProtoIndexStoreDB.SymbolOccurrence)
}

inline void SymbolOccurrence::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relations_){arena}
    , decltype(_impl_.target_){}
    , decltype(_impl_.symbol_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.roles_){uint64_t{0u}}
    , decltype(_impl_.provider_kind_){1}
  };
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SymbolOccurrence::~SymbolOccurrence() {
  // @@protoc_insertion_point(destructor:ProtoIndexStoreDB.SymbolOccurrence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SymbolOccurrence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relations_.~RepeatedPtrField();
  _impl_.target_.Destroy();
  if (this != internal_default_instance()) delete _impl_.symbol_;
  if (this != internal_default_instance()) delete _impl_.location_;
}

void SymbolOccurrence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SymbolOccurrence::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoIndexStoreDB.SymbolOccurrence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.target_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.symbol_ != nullptr);
      _impl_.symbol_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    _impl_.roles_ = uint64_t{0u};
    _impl_.provider_kind_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SymbolOccurrence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ProtoIndexStoreDB.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_symbol(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_roles(&has_bits);
          _impl_.roles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ProtoIndexStoreDB.SymbolOccurrenceLocation location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ProtoIndexStoreDB.SymbolOccurrence.ProviderKind provider_kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoIndexStoreDB::SymbolOccurrence_ProviderKind_IsValid(val))) {
            _internal_set_provider_kind(static_cast<::ProtoIndexStoreDB::SymbolOccurrence_ProviderKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string target = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ProtoIndexStoreDB.SymbolOccurrence.target");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .ProtoIndexStoreDB.SymbolRelation relations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SymbolOccurrence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoIndexStoreDB.SymbolOccurrence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ProtoIndexStoreDB.Symbol symbol = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::symbol(this),
        _Internal::symbol(this).GetCachedSize(), target, stream);
  }

  // optional uint64 roles = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roles(), target);
  }

  // optional .ProtoIndexStoreDB.SymbolOccurrenceLocation location = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional .ProtoIndexStoreDB.SymbolOccurrence.ProviderKind provider_kind = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_provider_kind(), target);
  }

  // optional string target = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoIndexStoreDB.SymbolOccurrence.target");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_target(), target);
  }

  // repeated .ProtoIndexStoreDB.SymbolRelation relations = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_relations_size()); i < n; i++) {
    const auto& repfield = this->_internal_relations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoIndexStoreDB.SymbolOccurrence)
  return target;
}

size_t SymbolOccurrence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoIndexStoreDB.SymbolOccurrence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoIndexStoreDB.SymbolRelation relations = 6;
  total_size += 1UL * this->_internal_relations_size();
  for (const auto& msg : this->_impl_.relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string target = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target());
    }

    // optional .ProtoIndexStoreDB.Symbol symbol = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.symbol_);
    }

    // optional .ProtoIndexStoreDB.SymbolOccurrenceLocation location = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional uint64 roles = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roles());
    }

    // optional .ProtoIndexStoreDB.SymbolOccurrence.ProviderKind provider_kind = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_provider_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SymbolOccurrence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SymbolOccurrence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SymbolOccurrence::GetClassData() const { return &_class_data_; }


void SymbolOccurrence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SymbolOccurrence*>(&to_msg);
  auto& from = static_cast<const SymbolOccurrence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoIndexStoreDB.SymbolOccurrence)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.relations_.MergeFrom(from._impl_.relations_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_target(from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_symbol()->::ProtoIndexStoreDB::Symbol::MergeFrom(
          from._internal_symbol());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_location()->::ProtoIndexStoreDB::SymbolOccurrenceLocation::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.roles_ = from._impl_.roles_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.provider_kind_ = from._impl_.provider_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SymbolOccurrence::CopyFrom(const SymbolOccurrence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoIndexStoreDB.SymbolOccurrence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolOccurrence::IsInitialized() const {
  return true;
}

void SymbolOccurrence::InternalSwap(SymbolOccurrence* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.relations_.InternalSwap(&other->_impl_.relations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_, lhs_arena,
      &other->_impl_.target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SymbolOccurrence, _impl_.roles_)
      + sizeof(SymbolOccurrence::_impl_.roles_)
      - PROTOBUF_FIELD_OFFSET(SymbolOccurrence, _impl_.symbol_)>(
          reinterpret_cast<char*>(&_impl_.symbol_),
          reinterpret_cast<char*>(&other->_impl_.symbol_));
  swap(_impl_.provider_kind_, other->_impl_.provider_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolOccurrence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Symbol_2eproto_getter, &descriptor_table_Symbol_2eproto_once,
      file_level_metadata_Symbol_2eproto[4]);
}

// ===================================================================

class SymbolOccurrences::_Internal {
 public:
};

SymbolOccurrences::SymbolOccurrences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoIndexStoreDB.SymbolOccurrences)
}
SymbolOccurrences::SymbolOccurrences(const SymbolOccurrences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SymbolOccurrences* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.occurrence_){from._impl_.occurrence_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtoIndexStoreDB.SymbolOccurrences)
}

inline void SymbolOccurrences::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.occurrence_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SymbolOccurrences::~SymbolOccurrences() {
  // @@protoc_insertion_point(destructor:ProtoIndexStoreDB.SymbolOccurrences)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SymbolOccurrences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.occurrence_.~RepeatedPtrField();
}

void SymbolOccurrences::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SymbolOccurrences::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoIndexStoreDB.SymbolOccurrences)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.occurrence_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SymbolOccurrences::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ProtoIndexStoreDB.SymbolOccurrence occurrence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_occurrence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SymbolOccurrences::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoIndexStoreDB.SymbolOccurrences)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProtoIndexStoreDB.SymbolOccurrence occurrence = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_occurrence_size()); i < n; i++) {
    const auto& repfield = this->_internal_occurrence(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoIndexStoreDB.SymbolOccurrences)
  return target;
}

size_t SymbolOccurrences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoIndexStoreDB.SymbolOccurrences)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoIndexStoreDB.SymbolOccurrence occurrence = 1;
  total_size += 1UL * this->_internal_occurrence_size();
  for (const auto& msg : this->_impl_.occurrence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SymbolOccurrences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SymbolOccurrences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SymbolOccurrences::GetClassData() const { return &_class_data_; }


void SymbolOccurrences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SymbolOccurrences*>(&to_msg);
  auto& from = static_cast<const SymbolOccurrences&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoIndexStoreDB.SymbolOccurrences)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.occurrence_.MergeFrom(from._impl_.occurrence_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SymbolOccurrences::CopyFrom(const SymbolOccurrences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoIndexStoreDB.SymbolOccurrences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolOccurrences::IsInitialized() const {
  return true;
}

void SymbolOccurrences::InternalSwap(SymbolOccurrences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.occurrence_.InternalSwap(&other->_impl_.occurrence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolOccurrences::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Symbol_2eproto_getter, &descriptor_table_Symbol_2eproto_once,
      file_level_metadata_Symbol_2eproto[5]);
}

// ===================================================================

class Symbols::_Internal {
 public:
};

Symbols::Symbols(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoIndexStoreDB.Symbols)
}
Symbols::Symbols(const Symbols& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Symbols* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_){from._impl_.symbol_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtoIndexStoreDB.Symbols)
}

inline void Symbols::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Symbols::~Symbols() {
  // @@protoc_insertion_point(destructor:ProtoIndexStoreDB.Symbols)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Symbols::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.symbol_.~RepeatedPtrField();
}

void Symbols::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Symbols::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoIndexStoreDB.Symbols)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Symbols::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ProtoIndexStoreDB.Symbol symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_symbol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Symbols::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoIndexStoreDB.Symbols)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProtoIndexStoreDB.Symbol symbol = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_symbol_size()); i < n; i++) {
    const auto& repfield = this->_internal_symbol(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoIndexStoreDB.Symbols)
  return target;
}

size_t Symbols::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoIndexStoreDB.Symbols)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoIndexStoreDB.Symbol symbol = 1;
  total_size += 1UL * this->_internal_symbol_size();
  for (const auto& msg : this->_impl_.symbol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Symbols::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Symbols::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Symbols::GetClassData() const { return &_class_data_; }


void Symbols::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Symbols*>(&to_msg);
  auto& from = static_cast<const Symbols&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoIndexStoreDB.Symbols)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.symbol_.MergeFrom(from._impl_.symbol_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Symbols::CopyFrom(const Symbols& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoIndexStoreDB.Symbols)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Symbols::IsInitialized() const {
  return true;
}

void Symbols::InternalSwap(Symbols* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.symbol_.InternalSwap(&other->_impl_.symbol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Symbols::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Symbol_2eproto_getter, &descriptor_table_Symbol_2eproto_once,
      file_level_metadata_Symbol_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoIndexStoreDB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoIndexStoreDB::SymbolInfo*
Arena::CreateMaybeMessage< ::ProtoIndexStoreDB::SymbolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoIndexStoreDB::SymbolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoIndexStoreDB::Symbol*
Arena::CreateMaybeMessage< ::ProtoIndexStoreDB::Symbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoIndexStoreDB::Symbol >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoIndexStoreDB::SymbolRelation*
Arena::CreateMaybeMessage< ::ProtoIndexStoreDB::SymbolRelation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoIndexStoreDB::SymbolRelation >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoIndexStoreDB::SymbolOccurrenceLocation*
Arena::CreateMaybeMessage< ::ProtoIndexStoreDB::SymbolOccurrenceLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoIndexStoreDB::SymbolOccurrenceLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoIndexStoreDB::SymbolOccurrence*
Arena::CreateMaybeMessage< ::ProtoIndexStoreDB::SymbolOccurrence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoIndexStoreDB::SymbolOccurrence >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoIndexStoreDB::SymbolOccurrences*
Arena::CreateMaybeMessage< ::ProtoIndexStoreDB::SymbolOccurrences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoIndexStoreDB::SymbolOccurrences >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoIndexStoreDB::Symbols*
Arena::CreateMaybeMessage< ::ProtoIndexStoreDB::Symbols >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoIndexStoreDB::Symbols >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
